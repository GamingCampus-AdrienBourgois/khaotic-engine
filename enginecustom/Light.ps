////////////////////////////////////////////////////////////////////////////////
// Filename: light.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture : register(t0);
SamplerState SampleType : register(s0);
cbuffer LightBuffer
{

    float4 ambientColor;

    float4 diffuseColor;
    float3 lightDirection;
<<<<<<< Updated upstream:enginecustom/Light.ps
    float padding;
=======
	float padding;
    float specularPower;
    float4 specularColor;
>>>>>>> Stashed changes:enginecustom/light.ps
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
<<<<<<< Updated upstream:enginecustom/Light.ps
    float3 normal : NORMAL;
=======
	float3 normal : NORMAL;
    float3 viewDirection : TEXCOORD1;
>>>>>>> Stashed changes:enginecustom/light.ps
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
<<<<<<< Updated upstream:enginecustom/Light.ps
    float4 textureColor;
    float3 lightDir;
    float lightIntensity;
    float4 color;

=======
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;
    float3 reflection;
    float4 specular;
>>>>>>> Stashed changes:enginecustom/light.ps

    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    textureColor = shaderTexture.Sample(SampleType, input.tex);

<<<<<<< Updated upstream:enginecustom/Light.ps
    // Invert the light direction for calculations.
=======

    // Set the default output color to the ambient light value for all pixels.
    color = ambientColor;

    // Initialize the specular color.
    specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

	// Invert the light direction for calculations.
>>>>>>> Stashed changes:enginecustom/light.ps
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(input.normal, lightDir));

<<<<<<< Updated upstream:enginecustom/Light.ps
=======

     if(lightIntensity > 0.0f)
    {
        // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
        color += (diffuseColor * lightIntensity);

        // Saturate the final light color.
        color = saturate(color);

         // Calculate the reflection vector based on the light intensity, normal vector, and light direction.
        reflection = normalize(2.0f * lightIntensity * input.normal - lightDir); 

         // Determine the amount of specular light based on the reflection vector, viewing direction, and specular power.
        specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
    }
    
    // Add the specular component last to the output color.
    color = saturate(color + specular);

    // Change the diffuse color to red (0, 1, 0)
    float3 greenDiffuseColor = float3(1, 0, 0);

>>>>>>> Stashed changes:enginecustom/light.ps
    // Determine the final amount of diffuse color based on the diffuse color combined with the light intensity.
    //color = saturate(diffuseColor * lightIntensity);

    // Multiply the texture pixel and the final diffuse color to get the final pixel color result.
    color = color * textureColor;

    return color;
}